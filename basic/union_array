arr = [1, 3, 4,4, 5, 7]
arr2 =[2, 3, 5, 6,9]



m = len(arr)
n = len(arr2)
i, j = 0, 0
union = []

while i < m and j < n:
    if arr[i] < arr2[j]:
        if arr[i] not in union:
            union.append(arr[i])
        i += 1
    elif arr2[j] < arr[i]:
        if arr2[j] not in union:
            union.append(arr2[j])
        j += 1
    else:  # When arr[i] is equal to arr2[j]
        if arr[i] not in union:
            union.append(arr[i])
        i += 1
        j += 1  # Increment both pointers when elements are equal

while i < m:
    if arr[i] not in union:
        union.append(arr[i])
    i += 1

while j < n:
    if arr2[j] not in union:
        union.append(arr2[j])
    j += 1

print(union)
'''Time Complexity: O(m+n), Because at max i runs for n times and j runs for m times. When there are no common elements in arr1 and arr2 and all elements in arr1, arr2 are distinct. 

Space Complexity : O(m+n) {If Space of Union ArrayList is considered} 

O(1) {If Space of union ArrayList is not considered}'''
###########################
#brute force by using set
##########################

union1 =[]
set1 =set()

for p in arr:
    set1.add(p)


for q in arr2:
    set1.add(q)

for k in set1:
    union1.append(k)



print(union1)
# print(arr,arr2)
# print(len(set1))

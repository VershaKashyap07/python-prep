iList =[10, 20, 15, 2, 23, 90, 67]
length =len(iList)
def findPeak(l):
    if length==1:
        return l[0]
    if l[0]> l[1]:
        return l[0]
    if l[length-1]>l[length-2]:
        return l[length-1]
    
    for i in range(1,length-1):
        if l[i]>l[i+1] and l[i]>l[i-1]:
            return l[i]
        
peak = findPeak(iList)
print(peak)


##########################
#using binary search
#######################
def findPeak(l):
    if length==1:
        return l[0]
    if l[0]> l[1]:
        return l[0]
    if l[length-1]>l[length-2]:
        return l[length-1]
    
    low = 1
    high = length-2
    while low<=high:
        mid =(low+high)//2
        if l[mid]>l[mid-1] and l[mid]>l[mid+1]:
            return mid
        # mid at increasing side so peak will be at right
        elif l[mid]>l[mid-1]:
            low = mid+1
        # mid at decreasing side so peak will at somewhere in left
        elif l[mid]>l[mid+1]:
            high = mid-1
    
    return -1

#TC = O(N)
        
# peak = findPeak(iList)
# print(peak)



##########################
#using binary search for multiple peaks
#######################
def findMulPeak(l):
    if length==1:
        return l[0]
    if l[0]> l[1]:
        return l[0]
    if l[length-1]>l[length-2]:
        return l[length-1]
    
    low = 1
    high = length-2
    while low<=high:
        mid =(low+high)//2
        if l[mid]>l[mid-1] and l[mid]>l[mid+1]:
            return mid
    # mid at increasing side so peak will be at right
        elif l[mid]>l[mid-1]:
            low = mid+1
        # mid at decreasing side so peak will at somewhere in left
        elif l[mid]>l[mid+1]:
            high = mid-1    
        else:       
            high = mid-1 # left side peak
            #low = mid+1 # right side peak
    
    return -1


        
peak = findMulPeak(iList)
print(peak)
#TC = O(logn)
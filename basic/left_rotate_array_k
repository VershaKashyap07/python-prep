arr = [1,2,3,4,5,6,7]
n=len(arr)
###brute force for k place

def bruteforcebyD(arr,k):
    n=len(arr)
    k=3
    k= k% n
    temp = arr[:k]

    ##shifting
    for i in range(k,n):
        arr[i-k] =arr[i]

    #put temp back
    for j in range(n-k,n):
        arr[j] = temp[j-(n-k)]

    print(arr)

# brute force for one place
def bruteforceby1(arr):
    n=len(arr)
    temp = arr[0]

    for i in range(1,n):
        arr[i-1]= arr[i]

    arr[n-1] = temp

bruteforceby1(arr)

def reverse(arr, start, end):
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1

def optimalbyD(arr, k):
    if k == 0:
        return arr
    
    n = len(arr)
    k = k % n

    reverse(arr, 0, k - 1) #0 to k
    reverse(arr, k, n - 1)  #k to n
    reverse(arr, 0, n - 1) # comp array
    return arr

# Example usage
arr = [1, 2, 3, 4, 5,6,7]
k = 3
print(optimalbyD(arr, k))
#Time Complexity â€“ O(N) where N is the number of elements in an array